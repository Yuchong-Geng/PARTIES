==== Network ====
Useful link of qdisc: https://www.linux.com/training-tutorials/tc-show-manipulate-traffic-control-settings/
  
qdisc is used to control network bandwidth to the outside world, not incoming network traffic. So it should be configured in the server container, and the target IP is the client side. Suppose the current network is called "eth0", then
  1. create your qdisc:
    tc qdisc show dev eth0
    tc qdisc del dev eth0 root
    tc qdisc add dev eth0 root handle 1: htb
    tc qdisc show dev eth0
  2. create your class ([Flow ID] is just a random integer, while [rate] is the capped network bandwidth, such as 50mbit, 30gbit, the upper limit is 30gbit):
    tc class add dev eth0 parent 1: classid 1:[Flow ID] htb rate [rate]
    tc class show dev eth0
  3. create your filter:
    tc filter add dev eth0 protocol ip parent 1: prio 1 u32 match ip dst [target IP address] flow
  4. change the network bandwidth:
    tc class change dev eth0 parent 1: classid 1:[Flow ID] htb rate [new rate]
  5. delete your qdisc (800:801 is obtained from running "qdisc show"):
    tc qdisc show dev eth0
    tc filter del dev eth0 parent 1: proto ip prio 1 handle 800::801 u32
    tc qdisc del dev eth0 root
     

==== Power ====
RAPL: https://www.kernel.org/doc/Documentation/power/powercap/powercap.txt


==== Frequency (per-core DVFS) ====
* Install cpupower. To check the current frequency driver, run
  cpupower frequency-info
* Currently only the ACPI frequency driver supports per-core DVFS. To change the freuqency driver from intel_pstate to acpi: https://unix.stackexchange.com/questions/121410/setting-cpu-governor-to-on-demand-or-conservative
  Essentially, you need to add "intel_pstate=disable" in the kernel argument list.
  More info about ACPI: https://wiki.archlinux.org/index.php/CPU_frequency_scaling
* To change the governor to userspace and allow user-defined frequencies:
  cpupower frequency-set -g userspace
  cpupower -c <cores> frequency-set -f <frequency>


==== Last-level Cache ====
Intel RDT: Chapter 17.17 & 17.18 of the Software Manual: https://software.intel.com/sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf

Since we only need CAT from Intel RDT, you can simply install pqos: https://github.com/intel/intel-cmt-cat/tree/master/pqos
Check out the wiki page in the GitHub repo for detailed usage: https://github.com/intel/intel-cmt-cat/wiki/Usage-Examples

My mostly used commands are (the masks are just examples): 
  pqos -s
  pqos -e "llc:1=0x000f" // set COS1 to only using four cache ways
  pqos -a "llc:1=0-10"   // bind core 0-10 to COS1, i.e., these core can only use four cache ways and will share the same four ways


==== Miscellaneous ====
* To root ssh to a remote machine:
  1. Edit /etc/ssh/sshd_config, add "PermitRootLogin yes" to the file. Then do "service ssh restart"
  2. Add the ip address of the remote machine to /etc/security/access.conf in the local machine.
  3. To ssh without password: http://www.linuxproblem.org/art_9.html
* Due to the setup of servers at Cornell ECE, when a server is rebooted, we need to do the following things (may not be necessary to other servers):
  1. Run the following lines to modify iptables:
    iptables -L input --line-numbers
    iptables -D input <the number of the line that drops all requests>
     Use "ping" and "trace route" to double check that this line is deleted successfully.
  2. Set up IRQ cores: see moveirq.sh
  3. Start containers, set up port forwarding: see restart.sh and portforw.sh
  
